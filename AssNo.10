#include <stdio.h>
#include <stdlib.h>

struct node {
int data;
struct node *next;
};

struct node *head = NULL, *temp, *prevnode, *newnode;

void insertAtFirst() {
newnode = malloc(sizeof(struct node));
if (newnode == NULL) {
printf("Memory allocation failed\n");
return;
}

printf("Enter the data for newnode: ");  
scanf("%d", &newnode->data);  

newnode->next = head;  
head = newnode;

}

void insertAtLast() {
newnode = malloc(sizeof(struct node));
if (newnode == NULL) {
printf("Memory allocation failed\n");
return;
}

printf("Enter the data for newnode: ");  
scanf("%d", &newnode->data);  
  

if (head == NULL) {  
    head = newnode;  
    newnode->next = NULL;  
      
} else {  
    temp = head;  
    while (temp->next != NULL) {  
        temp = temp->next;  
    }  
    temp->next = newnode;  
      
}

}

void insertAtPosition() {
int pos, i = 1;
newnode = malloc(sizeof(struct node));
if (newnode == NULL) {
printf("Memory allocation failed\n");
return;
}

printf("Enter position to insert: ");  
scanf("%d", &pos);  
printf("Enter data for newnode: ");  
scanf("%d", &newnode->data);  

if (pos == 1) {  
    newnode->next = head;  
    head = newnode;  
} else {  
    temp = head;  
    while (i < pos - 1 && temp != NULL) {  
        temp = temp->next;  
        i++;  
    }  
    if (temp == NULL) {  
        printf("Position out of range\n");  
        free(newnode);  
    } else {  
        newnode->next = temp->next;  
        temp->next = newnode;  
    }  
}

}

void deleteAtFirst() {
if (head == NULL) {
printf("SLL is empty\n");
} else {
temp = head;
head = head->next;
free(temp);
printf("Node deleted from the beginning\n");
}
}

void deleteAtLast() {
if (head == NULL) {
printf("SLL is empty\n");
} else if (head->next == NULL) {
free(head);
head = NULL;
printf("Last node deleted\n");
} else {
temp = head;
while (temp->next != NULL) {
prevnode = temp;
temp = temp->next;
}
prevnode->next = NULL;
free(temp);
printf("Last node deleted\n");
}
}

void deleteAtPosition() {
int pos, i = 1;
printf("Enter position to delete: ");
scanf("%d", &pos);

if (head == NULL) {  
    printf("SLL is empty\n");  
    return;  
}  

if (pos == 1) {  
    temp = head;  
    head = head->next;  
    free(temp);  
    printf("Node deleted at position 1\n");  
} else {  
    temp = head;  
    while (i < pos - 1 && temp->next != NULL) {  
        temp = temp->next;  
        i++;  
    }  
    if (temp->next == NULL) {  
        printf("Position out of range\n");  
    } else {  
        prevnode = temp->next;  
        temp->next = prevnode->next;  
        free(prevnode);  
        printf("Node deleted at position %d\n", pos);  
    }  
}

}

void display() {
if (head == NULL) {
printf("SLL is empty\n");
} else {
temp = head;
printf("\nLinked list elements: ");
while (temp != NULL) {
printf("%d -> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}
}

int main() {
int choice;

do {  
    printf("\nSLL Operations:");  
    printf("\n1. Insert at first");  
    printf("\n2. Insert at last");  
    printf("\n3. Delete at first");  
    printf("\n4. Delete at last");  
    printf("\n5. Display");  
    printf("\n6. Exit");  
    printf("\n7. Insert at position");  
    printf("\n8. Delete at position");  

    printf("\nEnter your choice: ");  
    scanf("%d", &choice);  

    switch (choice) {  
        case 1: insertAtFirst(); break;  
        case 2: insertAtLast(); break;  
        case 3: deleteAtFirst(); break;  
        case 4: deleteAtLast(); break;  
        case 5: display(); break;  
        case 6: printf("Exiting Program\n"); break;  
        case 7: insertAtPosition(); break;  
        case 8: deleteAtPosition(); break;  
        default: printf("Invalid choice\n");  
    }  
} while (choice != 6);  

return 0;

}
